from scipy import stats

# 提供的数据集（16个模型，每个模型有8个不同的指标）
data = [
    [2.012166941, 6.737656226, 2.630206448, 0.207903254, 1.079308033, 0.925695658, 0.869962215, 1.114598274],
    [2.319714866, 7.218318625, 2.994303291, 0.222496061, 3.535571337, 3.462949753, 3.976392269, 3.997768164],
    [1.341649626, 4.127115667, 2.031530376, 0.179808334, 4.423863649, 4.658541441, 4.908457756, 4.465329409],
    [1.902211341, 8.110826851, 2.726191551, 0.273603416, 0.161923885, 0.143874884, 0.160419941, 0.145000458],
    [1.366340739, 4.237156316, 2.055862744, 0.185652186, 1.422709703, 1.184082031, 1.16566205, 1.325621605],
    [1.311735455, 4.243522128, 2.059981099, 0.19074348, 8.463121176, 8.528717279, 9.70776701, 8.457080364],
    [1.622310686, 5.608506113, 2.368228476, 0.204144669, 0.042820215, 0.319609642, 0.048658609, 0.042060375],
    [1.852889096, 6.345754075, 2.519078021, 0.212486907, 0.022118807, 0.026638508, 0.032402515, 0.027750492],
    [1.389723294, 4.370056877, 2.0904681, 0.186242166, 0.133809328, 0.179690838, 0.179535627, 0.15378809],
    [1.685903912, 5.572982164, 2.360716451, 0.202927668, 0.203952312, 0.170642376, 0.218597889, 0.181303501],
    [8.240583753, 64.23846134, 8.01246051, 0.490343415, 3.895060301, 4.072488308, 3.59527874, 4.7415452],
    [1.390724866, 4.406532333, 2.108652047, 0.187998321, 10.04284, 8.978439569, 8.87908268, 8.904550076],
    [1.685652993, 5.572085006, 2.360526426, 0.202927594, 0.040553331, 0.047673225, 0.048627853, 0.047123671],
    [1.530632473, 5.448503894, 2.334203053, 0.205926848, 0.972361326, 0.908906937, 0.961920977, 1.061668873],
    [1.403489615, 4.394680236, 2.08764526, 0.188153993, 46.21723366, 45.40960169, 49.41330028, 50.35122252],
    [1.47191709, 4.804007568, 2.191804637, 0.193434197, 0.407979965, 1.76142478, 0.4649086, 0.440762997]
]

# 存储具有统计显著性的最优模型的索引
best_model_indices = []

# 进行每个指标的配对 t 检验
for idx, metric_data in enumerate(data):
    # 以当前模型为基准，与其他模型进行配对 t 检验
    M1_errors = metric_data
    for i, other_model_errors in enumerate(data):
        if i != idx:
            M2_errors = other_model_errors

            # 执行配对 t 检验
            t_statistic, p_value = stats.ttest_rel(M1_errors, M2_errors)

            # 确定显著性水平为 1% 的临界值
            alpha = 0.01
            critical_value = stats.t.ppf(1 - alpha / 2, len(M1_errors) - 1)

            # 比较 t 统计量与临界值
            if abs(t_statistic) > critical_value:
                # 记录具有统计显著性的最优模型的索引
                best_model_indices.append(idx)
                break  # 若找到具有统计显著性的模型，跳出内循环

# 根据具有统计显著性的最优模型的指标数值进行排序
sorted_indices = sorted(best_model_indices, key=lambda x: min(data[x]))

# 输出排序后的具有统计显著性的最优模型的序号
print("具有统计显著性的最优模型的序号按照指标数值排序为:")
print(sorted_indices)
